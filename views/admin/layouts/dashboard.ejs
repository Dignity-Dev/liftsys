<div class="row mb-20 row-cols-xxxl-5 row-cols-lg-3 row-cols-sm-2 row-cols-1 gy-4">
    <div class="col">
        <div class="card shadow-none border bg-gradient-start-1 h-100">
            <div class="card-body p-20">
                <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
                    <div>
                        <p class="fw-medium text-primary-light mb-1">Total Customers</p>
                        <h6 class="mb-0">
                            <%= dash.customerCount %> +
                        </h6>
                    </div>
                    <div class="w-50-px h-50-px bg-cyan rounded-circle d-flex justify-content-center align-items-center">
                        <iconify-icon icon="gridicons:multiple-users" class="text-white text-2xl mb-0"></iconify-icon>
                    </div>
                </div>
                <p class="fw-medium text-sm text-primary-light mt-12 mb-0 d-flex align-items-center gap-2">
                    <span class="d-inline-flex align-items-center gap-1 text-success-main"><iconify-icon
                            icon="bxs:up-arrow" class="text-xs"></iconify-icon> +10</span> Last 100 days users
                </p>
            </div>
        </div>
        <!-- card end -->
    </div>
    <div class="col">
        <div class="card shadow-none border bg-gradient-start-2 h-100">
            <div class="card-body p-20">
                <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
                    <div>
                        <p class="fw-medium text-primary-light mb-1">Total Drivers</p>
                        <h6 class="mb-0">
                            <%= dash.driverCount %> +
                        </h6>
                    </div>
                    <div class="w-50-px h-50-px bg-purple rounded-circle d-flex justify-content-center align-items-center">
                        <iconify-icon icon="gridicons:multiple-users" class="text-white text-2xl mb-0"></iconify-icon>
                    </div>
                </div>
                <p class="fw-medium text-sm text-primary-light mt-12 mb-0 d-flex align-items-center gap-2">
                    <span class="d-inline-flex align-items-center gap-1 text-success-main"><iconify-icon
                            icon="bxs:up-arrow" class="text-xs"></iconify-icon> +2</span> Last 30 days
                </p>
            </div>
        </div>
        <!-- card end -->
    </div>
    <div class="col">
        <div class="card shadow-none border bg-gradient-start-3 h-100">
            <div class="card-body p-20">
                <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
                    <div>
                        <p class="fw-medium text-primary-light mb-1">Total No of Order</p>
                        <h6 class="mb-0">
                            <%= dash.totalOrders %> +
                        </h6>
                    </div>
                    <div class="w-50-px h-50-px bg-info rounded-circle d-flex justify-content-center align-items-center">
                        <iconify-icon icon="humbleicons:exchange-vertical" class="text-white text-2xl mb-0"></iconify-icon>
                    </div>
                </div>
                <p class="fw-medium text-sm text-primary-light mt-12 mb-0 d-flex align-items-center gap-2">
                    <span class="d-inline-flex align-items-center gap-1 text-success-main"><iconify-icon
                            icon="bxs:up-arrow" class="text-xs"></iconify-icon> +15</span> Last 30 days orders
                </p>
            </div>
        </div>
        <!-- card end -->
    </div>
    <div class="col">
        <div class="card shadow-none border bg-gradient-start-4 h-100">
            <div class="card-body p-20">
                <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
                    <div>
                        <p class="fw-medium text-primary-light mb-1">Total Vehicles</p>
                        <h6 class="mb-0">
                            <%= dash.vehicleCount %> +
                        </h6>
                    </div>
                    <div class="w-50-px h-50-px bg-success-main rounded-circle d-flex justify-content-center align-items-center">
                        <iconify-icon icon="fluent:vehicle-truck-cube-20-regular" class="text-white text-2xl mb-0"></iconify-icon>
                    </div>
                </div>
                <p class="fw-medium text-sm text-primary-light mt-12 mb-0 d-flex align-items-center gap-2">
                    <span class="d-inline-flex align-items-center gap-1 text-success-main"><iconify-icon
                            icon="bxs:up-arrow" class="text-xs"></iconify-icon> +1</span> Last 30 days
                </p>
            </div>
        </div>
        <!-- card end -->
    </div>
    <div class="col">
        <div class="card shadow-none border bg-gradient-start-5 h-100">
            <div class="card-body p-20">
                <div class="d-flex flex-wrap align-items-center justify-content-between gap-3">
                    <div>
                        <p class="fw-medium text-primary-light mb-1">Total Fleets</p>
                        <h6 class="mb-0">
                            <%= dash.fleetOwnerCount %>
                        </h6>
                    </div>
                    <div class="w-50-px h-50-px bg-red rounded-circle d-flex justify-content-center align-items-center">
                        <iconify-icon icon="mdi:fleet" class="text-white text-2xl mb-0"></iconify-icon>
                    </div>
                </div>
                <p class="fw-medium text-sm text-primary-light mt-12 mb-0 d-flex align-items-center gap-2">
                    <span class="d-inline-flex align-items-center gap-1 text-success-main"><iconify-icon
                            icon="bxs:up-arrow" class="text-xs"></iconify-icon> +2</span> Last 30 days
                </p>
            </div>
        </div>
        <!-- card end -->
    </div>
</div>


<div class="row gy-4">

    <div class="col-xxl-12">
        <div class="card h-100">
            <div class="card-body p-24 mb-8">
                <div class="d-flex align-items-end justify-content-between px-3 ">
                    <div class="btn-group" role="group" aria-label="Date Filter">
                        <button type="button" class="btn btn-primary active" id="12months-btn" onclick="loadChart(365)">Last 12 Months</button>
                        <button type="button" class="btn btn-primary" onclick="loadChart(180)">Last 6 Months</button>
                        <button type="button" class="btn btn-primary" onclick="loadChart(30)">Last 30 Days</button>
                        <button type="button" class="btn btn-primary" onclick="loadChart(7)">Last 7 Days</button>
                    </div>
                    <div class=""> <button type="button" class="btn btn-success" id="exportCsv">Export to CSV</button></div>

                </div>
                <canvas id="ordersChart" width="400" height="150" class="apexcharts-tooltip-style-1"></canvas>
                <div id="incomeExpense" class="apexcharts-tooltip-style-1"></div>
            </div>
        </div>
    </div>

</div>






<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>



<script>
    let chart;
    const ctx = document.getElementById('ordersChart').getContext('2d');
    const orders = <%- JSON.stringify(orders) %>;

    // Initial chart load with 12 months (365 days)
    loadChart(365);

    // Load the chart based on the selected period (days)
    function loadChart(days) {
        const completedOrders = filterCompletedOrders(orders);
        const filteredOrders = filterOrdersByDateRange(completedOrders, days);
        const groupedOrders = groupOrdersByPeriod(filteredOrders, days);

        const labels = Object.keys(groupedOrders); // X-axis labels (days or months)
        const dataAmount = Object.values(groupedOrders).map(order => order.amount); // Y-axis (order amounts)

        if (chart) chart.destroy();

        chart = new Chart(ctx, {
            type: 'line', // Changed to 'line' chart
            data: {
                labels: labels,
                datasets: [{
                    label: 'Successful Orders Amount',
                    data: dataAmount,
                    borderColor: 'rgba(75, 192, 192, 1)', // Line color
                    borderWidth: 2, // Width of the line
                    fill: false // Remove background color under the line
                }]
            },
            options: {
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: days === 7 ? 'Days of the Week' : 'Months'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Amount'
                        }
                    }
                }
            }
        });
    }

    // Filter orders by completion status
    function filterCompletedOrders(orders) {
        return orders.filter(order => order.status === 'completed');
    }

    // Group orders by the period (days or months)
    function groupOrdersByPeriod(orders, days) {
        if (days === 7) {
            return groupOrdersByDayOfWeek(orders); // Group by day of the week for 7 days
        } else {
            return groupOrdersByMonth(orders); // Group by month for 6 and 12 months
        }
    }

    // Group by day of the week
    function groupOrdersByDayOfWeek(orders) {
        const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const grouped = {};
        daysOfWeek.forEach(day => grouped[day] = {
            amount: 0
        });

        orders.forEach(order => {
            const date = new Date(order.createdAt);
            const dayOfWeek = daysOfWeek[date.getDay()];
            grouped[dayOfWeek].amount += order.price;
        });

        return grouped;
    }

    // Group by month
    function groupOrdersByMonth(orders) {
        const monthsOfYear = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const grouped = {};
        monthsOfYear.forEach(month => grouped[month] = {
            amount: 0
        });

        orders.forEach(order => {
            const date = new Date(order.createdAt);
            const month = monthsOfYear[date.getMonth()];
            grouped[month].amount += order.price;
        });

        return grouped;
    }

    // Filter orders by date range (last X days)
    function filterOrdersByDateRange(orders, days) {
        const now = new Date();
        return orders.filter(order => {
            const orderDate = new Date(order.createdAt);
            const diffTime = now - orderDate;
            const diffDays = diffTime / (1000 * 60 * 60 * 24); // Convert milliseconds to days
            return diffDays <= days;
        });
    }

    // Button click events to filter by different ranges
    document.querySelectorAll('.filter-button').forEach(button => {
        button.addEventListener('click', function() {
            const days = parseInt(this.getAttribute('data-days'));
            loadChart(days); // Reload chart with the selected date range
        });
    });


    // Export filtered data to CSV
    document.getElementById('exportCsv').addEventListener('click', () => {
        const completedOrders = filterCompletedOrders(orders);
        const csvContent = convertOrdersToCSV(completedOrders);
        downloadCSV(csvContent, 'orders_data.csv');
    });

    // Convert order data to CSV format
    function convertOrdersToCSV(orders) {
        const header = ['Order ID', 'Created At', 'Price', 'Status'];
        const rows = orders.map(order => [
            order.orderID,
            new Date(order.createdAt).toISOString().split('T')[0],
            order.price,
            order.status
        ]);

        const csvContent = [header, ...rows].map(e => e.join(',')).join('\n');
        return csvContent;
    }

    // Download CSV file
    function downloadCSV(content, fileName) {
        const blob = new Blob([content], {
            type: 'text/csv;charset=utf-8;'
        });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.setAttribute('download', fileName);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>
